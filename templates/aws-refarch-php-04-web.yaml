---
AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host PHP Site on AWS - Creates web Auto Scaling group

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Web Parameters
      Parameters:
        - KeyName
        - WebInstanceType
        - WebAsgMax
        - WebAsgMin
        - WebSecurityGroup
        - WebSubnet0
        - WebSubnet1
        - WebSubnet2
        - PublicAlbTargetGroupArn
        - PublicAlbHostname
        - SslCertificate
    - Label:
        default: Application Parameters
      Parameters:
        # - WPTitle
        - AppDomainName
        - AppDirectory
        # - WPAdminUsername
        # - WPAdminPassword
        # - WPAdminEmail
        # - WPLocale
    # - Label:
    #     default: Database Parameters
    #   Parameters:
    #     - DatabaseClusterEndpointAddress
    #     - DatabaseName
    #     - DatabaseMasterUsername
    #     - DatabaseMasterPassword
    - Label:
        default: File System Parameters
      Parameters:
        - ElasticFileSystem
    ParameterLabels:
      # DatabaseClusterEndpointAddress:
      #   default: DB Cluster Endpoint Address
      # DatabaseMasterUsername:
      #   default: DB Master Username
      # DatabaseMasterPassword:
      #   default: DB Master Password
      # DatabaseName:
      #   default: DB Name
      ElasticFileSystem:
        default: EFS File System
      KeyName:
        default: Existing Key Pair
      PublicAlbTargetGroupArn:
        default: Public Alb Target Group Arn
      PublicAlbHostname:
        default: Public Alb Hostname
      SslCertificate:
        default: ACM Cert attached to Public Alb
      WebAsgMax:
        default: Web ASG Max
      WebAsgMin:
        default: Web ASG Min
      WebInstanceType:
        default: Web Instance Type
      WebSecurityGroup:
        default: Web Security Group
      WebSubnet0:
        default: Web Subnet for AZ 0
      WebSubnet1:
        default: Web Subnet for AZ 1
      WebSubnet2:
        default: Web Subnet for AZ 2
      # WPAdminEmail:
      #   default: Admin Email
      # WPAdminPassword:
      #   default: Admin Password
      # WPAdminUsername:
      #   default: Admin Username
      AppDirectory:
        default: Site Directory
      AppDomainName:
        default: Site Domain
      # WPLocale:
      #   default: Language Code
      # WPTitle:
      #   default: Site Title

Parameters:

  # DatabaseClusterEndpointAddress:
  #   Description: The RDS cluster endpoint address.
  #   Type: String
  # DatabaseMasterUsername:
  #   AllowedPattern: ^([a-zA-Z0-9]*)$
  #   Description: The Amazon RDS master username.
  #   ConstraintDescription: Must contain only alphanumeric characters and be at least 8 characters.
  #   MaxLength: 16
  #   MinLength: 1
  #   Type: String
  # DatabaseMasterPassword:
  #   AllowedPattern: ^([a-z0-9A-Z`~!#$%^&*()_+,\\-])*$
  #   ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
  #   Description: The Amazon RDS master password.
  #   MaxLength: 41
  #   MinLength: 8
  #   NoEcho: true
  #   Type: String
  # DatabaseName:
  #   AllowedPattern: ^([a-zA-Z0-9]*)$
  #   Description: The Amazon RDS master database name.
  #   Type: String
  ElasticFileSystem:
    AllowedPattern: ^(fs-)([a-z0-9]{8})$
    Description: The Amazon EFS file system id.
    Type: String
  KeyName:
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  PublicAlbTargetGroupArn:
    Description: The public application load balancer target group arn.
    Type: String
  PublicAlbHostname:
    Description: The hostname of the public ALB http form (e.g. http://abdc-12345-xyz.<region>.elb.amazonaws.com)
    Type: String
  SslCertificate:
    AllowedValues:
      - True
      - False
    Default: False
    Description: Is there an ACM SSL Certificate attached to the Public Alb?
    Type:
      String
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: t2.large
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebSecurityGroup:
    Description: Select the web security group.
    Type: AWS::EC2::SecurityGroup::Id
  WebSubnet0:
    Description: Select an existing web subnet for AZ 0.
    Type: AWS::EC2::Subnet::Id
  WebSubnet1:
    Description: Select an existing web subnet for AZ 1.
    Type: AWS::EC2::Subnet::Id
  WebSubnet2:
    Description: Select an existing web subnet for AZ 2.
    Type: AWS::EC2::Subnet::Id
  # WPAdminEmail:
  #   AllowedPattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
  #   Description: The WordPress admin email address.
  #   Type: String
  # WPAdminPassword:
  #   AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
  #   ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-   
  #   Description: The WordPress admin password.
  #   Type: String
  #   NoEcho: true
  # WPAdminUsername:
  #   AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
  #   Description: The WordPress admin username.
  #   Type: String
  AppDirectory:
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The site directory.
    Type: String
  AppDomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: '[ Optional ] The main domain name of the site (e.g. example.com). Leave empty to use the ALB DNS name for the site.'
    Type: String
  # WPLocale:
  #   Description: The main language of the WordPress site, as per https://codex.WordPress.org/Installing_WordPress_in_Your_Language. The default is 'en_GB'.
  #   Type: String
  #   Default: en_GB
  # WPTitle:
  #   AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9 _-]*)([a-zA-Z0-9])$
  #   Description: The WordPress website title.
  #   Type: String

Conditions:

  NoSslCertificate:
    !Equals [ False, !Ref SslCertificate ]
  MoreThan2AZ:
    !Or [
      !Equals [ !Ref 'AWS::Region', us-east-1 ],
      !Equals [ !Ref 'AWS::Region', us-east-2 ],
      !Equals [ !Ref 'AWS::Region', us-west-2 ],
      !Equals [ !Ref 'AWS::Region', eu-central-1 ],
      !Equals [ !Ref 'AWS::Region', eu-west-1 ],
      !Equals [ !Ref 'AWS::Region', sa-east-1 ],
      !Equals [ !Ref 'AWS::Region', ap-northeast-1 ],
      !Equals [ !Ref 'AWS::Region', ap-southeast-2 ]
    ]
  NoAppDomainName:
    !Equals [ '', !Ref AppDomainName ]

Mappings:

  RegionMap:
    ap-northeast-1:
      AMI: ami-aae114cc
    ap-northeast-2:
      AMI: ami-d24e97bc
    ap-southeast-1:
      AMI: ami-e8da418b
    ap-southeast-2:
      AMI: ami-49b3aa2a
    ca-central-1:
      AMI: ami-b3cf71d7
    eu-central-1:
      AMI: ami-9c1db3f3
    eu-west-1:
      AMI: ami-016f9e78
    eu-west-2:
      AMI: ami-fde6f799
    sa-east-1:
      AMI: ami-7ad8ae16
    us-east-1:
      AMI: ami-b391b9c8
    us-east-2:
      AMI: ami-a7aa8ac2
    us-west-1:
      AMI: ami-8edbf0ee
    us-west-2:
      AMI: ami-9d04e4e5

Resources:

  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref WebLaunchConfiguration
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroupArn
      VPCZoneIdentifier:
        !If [
          MoreThan2AZ,
          [ !Ref WebSubnet0, !Ref WebSubnet1, !Ref WebSubnet2 ],
          [ !Ref WebSubnet0, !Ref WebSubnet1 ]
        ]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref WebAsgMin
        Timeout: PT5M
  WebLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    # Metadata:
    #   AWS::CloudFormation::Init:
        # configSets:
        #   deploy_webserver:
        #     - install_webserver
        #     - build_cacheclient
        #     - build_opcache
        #     - install_managed
        #     - build_wordpress
        #     - install_cacheclient
        #     - install_wordpress
        #     - install_opcache
        #     - start_webserver
        # install_managed:
        #   files:
        #     /tmp/install_managed.sh:
        #       content:
        #         !Join [
        #           "",[
        #             "#!/bin/bash -xe\n",
        #             "curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli-bundle.zip'\n",
        #             "unzip awscli-bundle.zip\n",
        #             "/usr/bin/python3 awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws\n",
        #             "curl 'https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb' -o 'amazon-ssm-agent.deb'\n",
        #             "dpkg -i amazon-ssm-agent.deb\n",
        #             "systemctl enable amazon-ssm-agent\n",
        #             "DD_API_KEY=$(/usr/local/aws ssm get-parameters --names MonitoringDataDogKey --region ${AWS::Region} | jq  -r '.Parameters[].Value')\n",
        #             "bash -c '$(curl -L https://raw.githubusercontent.com/DataDog/dd-agent/master/packaging/datadog-agent/source/install_agent.sh)'"
        #           ]
        #         ]
        #       mode: 000500
        #       owner: root
        #       group: root
        #   commands:
        #     create_site_conf:
        #       command: ./install_managed.sh
        #       cwd: /tmp
        #       ignoreErrors: false
        # install_webserver:
        #   packages:
        #     apt:
        #       # awslogs: []
        #       apache2: []
        #       mysql-client: []
        #       php-fpm: []
        #       php7.0-common: []
        #       php7.0-cli: []
        #       php7.0-mysql: []
        #       php7.0-dev: []
        #       php7.0-fpm: []
        #       libpcre3-dev: []
        #       php7.0-gd: []
        #       php7.0-curl: []
        #       php7.0-imap: []
        #       php7.0-json: []
        #       php7.0-xml: []
        #       php7.0-mbstring: []
        #       php-sqlite3: []
        #       php-apcu: []
        #       php7.0-mysql: []
        #   files:
        #     /tmp/create_site_conf.sh:
        #       content:
        #         !Join [
        #           "",[
        #             "#!/bin/bash -xe\n",
        #             "if [ ! -f /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf ]; then\n",
        #             "   touch /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo 'ServerName 127.0.0.1:80' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo 'DocumentRoot /var/www/application/", !Ref AppDirectory, "' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo '<Directory /var/www/application/", !Ref AppDirectory, ">' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo '  Options Indexes FollowSymLinks' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo '  AllowOverride All' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo '  Require all granted' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo '</Directory>' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "   echo 'ProxyPassMatch ^/(.*\\.php(/.*)?)$ \"unix:/run/php/php7.0-fpm.sock|fcgi://localhost/var/www/application/", !Ref AppDirectory, "\">' ' >> /etc/apache2/sites-enabled/", !Ref AppDirectory, ".conf\n",
        #             "fi\n"
        #           ]
        #         ]
        #       mode: 000500
        #       owner: root
        #       group: root
        #   commands:
        #     create_site_conf:
        #       command: ./create_site_conf.sh
        #       cwd: /tmp
        #       ignoreErrors: false
        # build_cacheclient:
        #   files:
        #     /tmp/install_cacheclient.sh:
        #       content:
        #         !Sub |
        #           #!/bin/bash -xe
        #           wget -P /tmp/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz
        #           tar -xf '/tmp/AmazonElastiCacheClusterClient-2.0.1-PHP70-64bit.tar.gz'
        #           cp '/tmp/artifact/amazon-elasticache-cluster-client.so' /usr/lib64/php/7.0/modules/
        #           if [ ! -f /etc/php/7.0/fpm/conf.d/50-memcached.ini ]; then
        #               touch /etc/php/7.0/fpm/conf.d/50-memcached.ini
        #           fi
        #           sed -i '3i extension=/usr/lib64/php/7.0/modules/amazon-elasticache-cluster-client.so;' /etc/php/7.0/fpm/conf.d/50-memcached.ini
        #           sed -i '3i extension=igbinary.so;' /etc/php/7.0/fpm/conf.d/50-memcached.ini
        #       mode: 000500
        #       owner: root
        #       group: root
        # build_opcache:
        #   packages:
        #     apt:
        #       php7.0-opcache: []
        #   files:
        #     /tmp/install_opcache.sh:
        #       content:
        #         !Sub |
        #           #!/bin/bash -xe
        #           # create hidden opcache directory locally & change owner to apache
        #           if [ ! -d /var/www/.opcache ]; then
        #               mkdir -p /var/www/.opcache
        #           fi
        #           # enable opcache in /etc/php-7.0.d/10-opcache.ini
        #           sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php-7.0.d/10-opcache.ini
        #           sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php-7.0.d/10-opcache.ini
        #           # download opcache-instance.php to verify opcache status
        #           if [ ! -f /var/www/application/${AppDirectory}/opcache-instanceid.php ]; then
        #               wget -P /var/www/application/${AppDirectory}/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php
        #           fi
        #       mode: 000500
        #       owner: root
        #       group: root
        # build_wordpress:
        #   files:
        #     /tmp/install_wordpress.sh:
        #       content:
        #         !Join [
        #           "",[
        #             "#!/bin/bash -xe\n",
        #             "\n",
        #             "# install wp-cli\n",
        #             "if [ ! -f /bin/wp/wp-cli.phar ]; then\n",
        #             "   curl -o /bin/wp https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n",
        #             "   chmod +x /bin/wp\n",
        #             "fi\n",
        #             "\n",
        #             "# make site directory\n",
        #             "if [ ! -d /var/www/wordpress/", !Ref WPDirectory, " ]; then\n",
        #             "   mkdir -p /var/www/wordpress/", !Ref WPDirectory, "\n",
        #             "\n",
        #             "   cd /var/www/wordpress/", !Ref WPDirectory, "\n",
        #             "   # install wordpress if not installed\n",
        #             "   # use public alb host name if wp domain name was empty\n",
        #             "   if ! $(wp core is-installed --allow-root); then\n",
        #             "       wp core download --locale='", !Ref WPLocale, "' --allow-root\n",
        #             "       wp core config --dbname='", !Ref DatabaseName, "' --dbuser='", !Ref DatabaseMasterUsername, "' --dbpass='", !Ref DatabaseMasterPassword, "' --dbhost='", !Ref DatabaseClusterEndpointAddress, "' --dbprefix=wp_ --allow-root\n",
        #             "       wp core install --url=", !If [ NoAppDomainName, !Ref PublicAlbHostname, !Join [ "", [ "'http://www.", !Ref AppDomainName, "'" ] ] ], " --title='", !Ref WPTitle, "' --admin_user='", !Ref WPAdminUsername, "' --admin_password='", !Ref WPAdminPassword, "' --admin_email='", !Ref WPAdminEmail, "' --skip-email --allow-root\n",
        #             "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_HOME', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
        #             "       sed -i \"/$table_prefix = 'wp_';/ a \\define('WP_SITEURL', 'http://' . \\$_SERVER['HTTP_HOST']); \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n",
        #             "       # enable HTTPS in wp-config.php if ACM Public SSL Certificate parameter was not empty\n",
        #                     !If [ NoSslCertificate, !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\# No ACM Public SSL Certificate \" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] , !Join [ '', [ "       sed -i \"/$table_prefix = 'wp_';/ a \\$_SERVER['HTTPS'] = 'on';\" /var/www/wordpress/", !Ref WPDirectory, "/wp-config.php\n" ] ] ],
        #             "\n",
        #             "       # set permissions of wordpress site directories\n",
        #             "       chown -R apache:apache /var/www/wordpress/", !Ref WPDirectory, "\n",
        #             "       chmod u+wrx /var/www/wordpress/", !Ref WPDirectory, "/wp-content/*\n",
        #             "       if [ ! -f /var/www/wordpress/", !Ref WPDirectory, "/opcache-instanceid.php ]; then\n",
        #             "         wget -P /var/www/wordpress/", !Ref WPDirectory, "/ https://s3.amazonaws.com/aws-refarch/wordpress/latest/bits/opcache-instanceid.php\n",
        #             "       fi\n",
        #             "   fi\n",
        #             "   RESULT=$?\n",
        #             "   if [ $RESULT -eq 0 ]; then\n",
        #             "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.initialized\n",
        #             "         else\n",
        #             "       touch /var/www/wordpress/", !Ref WPDirectory, "/wordpress.failed\n",
        #             "   fi\n",
        #             "fi\n"
        #           ]
        #         ]
        #       mode: 000500
        #       owner: root
        #       group: root
        # install_wordpress:
        #   commands:
        #     install_wordpress:
        #       command: ./install_wordpress.sh
        #       cwd: /tmp
        #       ignoreErrors: false
        # install_cacheclient:
        #   commands:
        #     install_cacheclient:
        #       command: ./install_cacheclient.sh
        #       cwd: /tmp
        #       ignoreErrors: false
        # install_opcache:
        #   commands:
        #     install_opcache:
        #       command: ./install_opcache.sh
        #       cwd: /tmp
        #       ignoreErrors: false
        # start_webserver:
        #   services:
        #     sysvinit:
        #       httpd:
        #         enabled: true
        #         ensureRunning: true
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            apt-get update -y
            apt-get upgrade -y
            mkdir -p /var/www/application
            mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/application/


# Outputs:

#   Opcachestatus:
#     Value: !Join [ '', [ !Ref PublicAlbHostname, '/opcache-instanceid.php' ] ]
